{"componentChunkName":"component---src-templates-blog-post-js","path":"/190826-Hosting-a-Static-Site-on-s3/","webpackCompilationHash":"564c4bbf660cc81a5d9a","result":{"data":{"site":{"siteMetadata":{"title":"AvidDabbler Blog","author":"Walter Jenkins"}},"markdownRemark":{"id":"cd802ec1-6e16-5db1-9ab9-05569cbd6fd1","excerpt":"Intro As I expressed in my last post, there were a number of different options that AWS offers to get up and running on a budget when hosting a static websiteâ€¦","html":"<h1>Intro</h1>\n<p>As I expressed in my last post, there were a number of different options that AWS offers to get up and running on a budget when hosting a static website, but at the end of the day I will be going the S3 / Cloudfront way of hosting and routing. This post will go through the following steps in a logical way:</p>\n<ul>\n<li>Hosting your files through AWS S3.</li>\n<li>Connecting your files to be accessible through url via Cloudfront.</li>\n<li>Use CodeBuild to connect your files to a GitHub Repo.</li>\n<li>Configure a custom domain to your project.</li>\n</ul>\n<blockquote>\n<h2><strong><em>MAKE SURE THAT YOU ARE CREATING THESE ALL WITHIN THE SAME REGION.</em></strong></h2>\n</blockquote>\n<h2>Set Up Your S3 Bucket</h2>\n<p>So the first thing that you need to know about setting up your website is where you need to store these files. <a href=\"https://s3.console.aws.amazon.com/s3\"><strong>S3</strong></a> is the most common way to store file on AWS securely. Think of S3 as your secure Dropbbox. Or that Dropbox is using S3? Anyway, S3 is going to be where you are going to be storing all of your static website files. In this section we are just going to focus on getting the bucket made public. You wont need to worry about getting anything moved over into the bucket as we will configure it to sync with your GitHub in the next section. </p>\n<p><strong>1. Go to your AWS Console and go to the S3 section of AWS</strong></p>\n<p><strong>2. create bucket with website name minus <em>www</em></strong></p>\n<p><strong>3. Go inside the bucket and the make public by going to the permissions tab and then click the <em>Block Public Access</em> button then click edit and turn them all off. Then save.</strong></p>\n<p><strong>4. In the same permissions tab click the <em>Bucket Policy</em> button. Then paste the following rule in the code editor and configuring it for the bucket that you just created.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Sid&quot;: &quot;PublicReadGetObject&quot;,\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Principal&quot;: &quot;*&quot;,\n            &quot;Action&quot;: [\n                &quot;s3:GetObject&quot;\n            ],\n            &quot;Resource&quot;: [\n                &quot;arn:aws:s3:::example-bucket/*&quot;\n            ]\n        }\n    ]\n}</code></pre></div>\n<p><strong>5. In that same window go to the properties tab and then click <em>Static Website Hosting</em>. Click <em>Use this Bucket to Host a Website</em> set the index document to <em>index.html</em> or whatever you set it up as in your static site. Click Save.</strong></p>\n<h2>Create CodePipeline</h2>\n<p>Now, we need some file to host. These files have to come from somewhere. Sure you could have just uploaded some files to your S3 and called it a night, but you want to put the work in you want to be able to just forget that you have to do that. You need <a href=\"https://aws.amazon.com/codepipeline/\"><strong>CodePipeline</strong></a>. CodePipeline is a great way to work with your code from a project that you want to host somewhere on GitHub, but also store for hosting on AWS. What this next section will do is help you manage the connection between your GitHub branch and your S3 so that whenever you make a change to your specified branch it will push out an update to your S3 bucket where you have your website files hosted. </p>\n<p><strong>1. Name the pipeline after your bucket for simplicity.</strong></p>\n<p><strong>2. new service role</strong></p>\n<p><strong>3. Advanced settings</strong></p>\n<p><strong>- Custom Location (Select the S3 bucket that you want to connect to as they need to be in the same location.)</strong></p>\n<p><strong>- Default AWS Managed Key</strong></p>\n<p><strong>4. Next</strong></p>\n<p>**Set your source provider to GitHub\n**Allow AWS to access GitHub\n**Select the Repository and Branch\n**Use GitHub Webhooks\n**Next\n**If your site is just static files you can just skip build stage, but if it in React or Gatsby you will need to add the build script in here\n**Set Deploy provider to Amazon S3\n**Select the bucket\n**Select extract files before deploy - This will allow for your files to be hosted in a readable format instead of all zipped up in a single file.\n**Next\n**Create Pipeline</p>\n<h2>Set up AWS Certificate Manager</h2>\n<ul>\n<li>go to Certificate Manager in the AWS console</li>\n<li>type in walterkjenkins.com and www.walterkjenkins.com</li>\n<li>copy over CNAME data to domains.google.com</li>\n<li>wait for validation</li>\n</ul>\n<h2>Set up CloundFront to connect to S3 Bucket</h2>\n<ul>\n<li>Origin Domain Name: select our bucket generated public domain, in this case <strong><em>www.walterkjenkins.com.s3.amazonaws.com</em></strong>, but you could set it up as <strong><em>%your_site%.s3.amazonaws.com</em></strong></li>\n<li>Origin Path: leave this blank</li>\n<li>Origin ID: by default, this field will be auto-generated by CloudFront, you can custom it as you want</li>\n<li>Restrict Bucket Access: yes</li>\n<li>alternative CNAME walterkjenkins.com www.walterkjenkins.com</li>\n<li>Origin Access Identity: Create a New Identity</li>\n<li>Comment: www.walterkjenkins.com-cloudfront</li>\n<li>Grant Read Permissions on Bucket: Yes, Update Bucket Policy</li>\n<li>Default Root Object: index.html</li>\n<li>Leave the rest filled default value</li>\n<li>Click Create Distribution</li>\n<li>go back to cloudfront</li>\n<li>edit</li>\n<li>attach the custom ssl certificate</li>\n<li>save</li>\n</ul>\n<h1>DNS Configuration</h1>\n<ul>\n<li>go back to domains.google.com</li>\n<li>add the www and * with the cloudfront.net address</li>\n</ul>\n<h5>Sources:</h5>\n<p><a href=\"https://medium.com/faun/deploy-static-website-to-amazon-s3-from-github-repository-3f1245d2a780\">Deploy Static Website to Amazon S3 from Github Repository</a>\n<a href=\"https://medium.com/@kyle.galbraith/how-to-host-a-website-on-s3-without-getting-lost-in-the-sea-e2b82aa6cd38\">How to Host a Website on S3 Without Getting Lost in the Sea</a>\n<a href=\"https://medium.com/@aashari\">Deploy Static Website to Amazon S3 from Github Repository</a></p>","frontmatter":{"title":"Hosting Static Sites on AWS","date":"August 26, 2019","description":"Configuring your static site using S3, Cloudfront, and CodeBuild"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/190826-Hosting-a-Static-Site-on-s3/","previous":{"fields":{"slug":"/190825-AWS-and-the-Three-Bears/"},"frontmatter":{"title":"AWS and the Three Bears"}},"next":null}}}